name: Deploy to cPanel

on:
  push:
    branches: [ restore_branch ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Create Express .env file
      run: |
        echo "# MongoDB Atlas Connection" > .env
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
        echo "MONGODB_DB=FreshShareDB" >> .env
        echo "PORT=3001" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "FASTIFY_BACKEND_URL=http://localhost:8080" >> .env
        echo "NODE_ENV=production" >> .env

    - name: Create Fastify .env file
      run: |
        mkdir -p fastify-backend
        echo "PORT=8080" > fastify-backend/.env
        echo "DATABASE_URL=postgres://myfrovov_freshshare_user:BjgjX2Vev2vmLwh@localhost:5432/myfrovov_freshshare" >> fastify-backend/.env
        echo "NODE_ENV=production" >> fastify-backend/.env

    - name: Verify scripts exist
      run: |
        if [ ! -f "start-express.sh" ]; then
          echo "ERROR: start-express.sh is missing!"
          exit 1
        fi
        if [ ! -f "fastify-backend/start-fastify.sh" ]; then
          echo "ERROR: fastify-backend/start-fastify.sh is missing!"
          exit 1
        fi
        echo "Scripts verified successfully"

    - name: Debug list startup scripts
      run: |
        ls -la
        ls -la fastify-backend || true

    - name: Install dependencies locally
      run: |
        # Clean Express dependencies
        rm -rf node_modules package-lock.json
        if ! npm install --production; then
          echo "npm install failed for Express. Exiting."
          exit 1
        fi
        
        # Clean Fastify dependencies
        cd fastify-backend
        rm -rf node_modules package-lock.json
        if ! npm install --production; then
          echo "npm install failed for Fastify. Exiting."
          exit 1
        fi
        cd ..

    - name: Make startup scripts executable
      run: |
        chmod +x start-express.sh
        chmod +x fastify-backend/start-fastify.sh
        
    - name: Set up SSH key
      run: |
        # Create SSH directory with proper permissions
        mkdir -p ~/.ssh || true
        chmod 700 ~/.ssh
        
        # Write the private key with proper formatting
        echo "${{ secrets.actions_deploy_key }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add server to known hosts
        ssh-keyscan -p ${{ secrets.SFTP_PORT }} -H ${{ secrets.FTP_SERVER }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
        # Debug: Check key format
        echo "Key starts with:"
        head -1 ~/.ssh/id_rsa
        echo "Key ends with:"
        tail -1 ~/.ssh/id_rsa
        
        # Test SSH connection
        ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SFTP_PORT }} myfrovov@${{ secrets.FTP_SERVER }} echo "SSH connection successful"

    - name: Ensure remote directories exist
      run: |
        ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SFTP_PORT }} myfrovov@${{ secrets.FTP_SERVER }} 'mkdir -p ~/public_html ~/public_html/fastify-backend'

    - name: SFTP Deploy to cPanel
      uses: wlixcc/SFTP-Deploy-Action@master
      with:
        server: ${{ secrets.FTP_SERVER }}
        port: ${{ secrets.SFTP_PORT }}
        username: myfrovov
        ssh_private_key: ${{ secrets.actions_deploy_key }}
        ssh_passphrase: ""
        sftp_only: true
        local_path: ./*
        remote_path: public_html/
        rsyncArgs: --exclude=.git --exclude=.github --exclude=deployment-packages --exclude=deployment --exclude=data/**

    - name: Post-deployment restart services
      run: |
        ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SFTP_PORT }} myfrovov@${{ secrets.FTP_SERVER }} '
          # Detect Node.js paths on cPanel
          echo "Detecting Node.js installation..."
          
          # Check for Node.js App in cPanel - prioritize Node.js 18
          if [ -d "$HOME/nodevenv" ]; then
            echo "Found cPanel Node.js App environment"
            echo "Available Node.js apps:"
            ls -la $HOME/nodevenv/ || echo "Cannot list nodevenv directory"
            
            # Look for any app with Node.js 18
            NODE_VERSION_DIR=$(find $HOME/nodevenv -path "*/18/bin" -type d | head -1)
            if [ -z "$NODE_VERSION_DIR" ]; then
              # Look for any Node.js version
              NODE_VERSION_DIR=$(find $HOME/nodevenv -name "bin" -type d | head -1)
              if [ -n "$NODE_VERSION_DIR" ]; then
                echo "WARNING: Node.js 18 not found, using: $NODE_VERSION_DIR"
                echo "Please update your cPanel Node.js App to version 18"
              fi
            fi
            
            if [ -n "$NODE_VERSION_DIR" ]; then
              NODE_BIN="$NODE_VERSION_DIR/node"
              NPM_BIN="$NODE_VERSION_DIR/npm"
              export PATH="$NODE_VERSION_DIR:$PATH"
              echo "Using cPanel Node.js App: $NODE_BIN"
              # Check Node.js version
              $NODE_BIN --version || echo "Failed to get Node.js version"
            else
              echo "ERROR: No Node.js application found in cPanel"
              echo "Please create a Node.js application in cPanel first"
            fi
          else
            echo "ERROR: No cPanel Node.js environment found"
            echo "Please create a Node.js application in cPanel"
          fi
          
          # If not found, check common paths
          if [ -z "$NODE_BIN" ]; then
            NODE_PATHS=(
              "/opt/cpanel/ea-nodejs18/bin"
              "/opt/cpanel/ea-nodejs20/bin"
              "/usr/local/bin"
              "/usr/bin"
            )
            
            for path in "${NODE_PATHS[@]}"; do
              if [ -f "$path/node" ] && [ -f "$path/npm" ]; then
                NODE_BIN="$path/node"
                NPM_BIN="$path/npm"
                export PATH="$path:$PATH"
                echo "Found Node.js at: $NODE_BIN"
                break
              fi
            done
          fi
          
          # Final fallback - try to find npm separately
          if [ -z "$NPM_BIN" ] || [ ! -f "$NPM_BIN" ]; then
            NPM_BIN=$(find /usr -name "npm" -type f 2>/dev/null | head -1)
            if [ -z "$NPM_BIN" ]; then
              NPM_BIN=$(find $HOME -name "npm" -type f 2>/dev/null | head -1)
            fi
            echo "Found npm at: $NPM_BIN"
          fi
          
          # Use system PATH as last resort
          if [ -z "$NODE_BIN" ]; then
            NODE_BIN=$(which node 2>/dev/null || echo "node")
            echo "Using system node: $NODE_BIN"
          fi
          
          if [ -z "$NPM_BIN" ]; then
            NPM_BIN=$(which npm 2>/dev/null || echo "npm")
            echo "Using system npm: $NPM_BIN"
          fi
          
          # Make scripts executable
          chmod +x ~/public_html/start-express.sh
          chmod +x ~/public_html/fastify-backend/start-fastify.sh
          
          # Install dependencies on server
          cd ~/public_html/fastify-backend
          echo "Installing Fastify dependencies on server..."
          if [ -f "$NPM_BIN" ] && [ -x "$NPM_BIN" ]; then
            $NPM_BIN install --production || echo "npm install failed for Fastify"
          else
            echo "npm not available, using pre-deployed dependencies"
          fi
          
          # Start Fastify backend
          echo "Starting Fastify backend..."
          pkill -f "node.*server.ts" || true
          if ! nohup ./start-fastify.sh > fastify.log 2>&1 &; then
            echo "ERROR: Failed to start Fastify backend"
            cat fastify.log || echo "No fastify.log found"
            exit 1
          fi
          
          # Wait for Fastify to initialize
          sleep 5
          
          # Install Express dependencies
          cd ~/public_html
          echo "Installing Express dependencies on server..."
          if [ -f "$NPM_BIN" ] && [ -x "$NPM_BIN" ]; then
            $NPM_BIN install --production || echo "npm install failed for Express"
          else
            echo "npm not available, using pre-deployed dependencies"
          fi
          
          # Start Express server
          echo "Starting Express server..."
          pkill -f "node server.js" || true
          if ! nohup ./start-express.sh > express.log 2>&1 &; then
            echo "ERROR: Failed to start Express server"
            cat express.log || echo "No express.log found"
            exit 1
          fi
          
          # Verify services are running
          sleep 3
          ps aux | grep node || echo "No node processes found"
        '
