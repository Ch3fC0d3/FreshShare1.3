name: Deploy to cPanel

on:
  push:
    branches: [ restore_branch ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Create MongoDB Fallback Configuration
      run: |
        echo "Creating local MongoDB fallback config..."
        mkdir -p config
        cat > config/mongodb-fallback.js << 'EOL'
        // MongoDB Fallback Configuration - Created by GitHub Actions
        // This configuration bypasses MongoDB Atlas when IP whitelist issues occur
        module.exports = {
          // Use local MongoDB for development, MongoDB Atlas for production
          uri: process.env.MONGODB_URI 
            ? process.env.MONGODB_URI.replace('mongodb+srv://', 'mongodb://') 
            : 'mongodb://localhost:27017/freshshare_db',
          options: {
            serverSelectionTimeoutMS: 30000,
            connectTimeoutMS: 30000,
            socketTimeoutMS: 45000,
            ssl: true,
            useNewUrlParser: true,
            useUnifiedTopology: true,
            directConnection: true
          }
        };
        EOL
        
        # Create a MongoDB connection wrapper that tries both approaches
        cat > config/db-connection.js << 'EOL'
        // Enhanced MongoDB Connection Module
        // Handles both MongoDB Atlas and fallback connections
        require('dotenv').config();
        const mongoose = require('mongoose');
        const fs = require('fs');
        const path = require('path');
        
        // Default MongoDB options
        const options = {
          serverSelectionTimeoutMS: 30000,
          connectTimeoutMS: 30000,
          socketTimeoutMS: 45000,
          ssl: true,
          useNewUrlParser: true,
          useUnifiedTopology: true
        };
        
        // Try to load fallback configuration if it exists
        let fallbackConfig = null;
        try {
          const fallbackPath = path.join(__dirname, 'mongodb-fallback.js');
          if (fs.existsSync(fallbackPath)) {
            fallbackConfig = require('./mongodb-fallback.js');
            console.log('Loaded MongoDB fallback configuration');
          }
        } catch (err) {
          console.log('No fallback configuration found, using standard connection');
        }
        
        // Connection function that tries multiple approaches
        async function connectToMongoDB() {
          const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/freshshare_db';
          
          try {
            // First try standard connection
            console.log('Attempting MongoDB Atlas connection...');
            await mongoose.connect(uri, options);
            console.log('✅ Connected to MongoDB Atlas successfully');
            return mongoose.connection;
          } catch (err) {
            console.log('⚠️ MongoDB Atlas connection failed:', err.message);
            
            // If fallback config exists, try that
            if (fallbackConfig) {
              try {
                console.log('Attempting fallback connection...');
                await mongoose.connect(fallbackConfig.uri, fallbackConfig.options);
                console.log('✅ Connected using fallback configuration');
                return mongoose.connection;
              } catch (fallbackErr) {
                console.error('❌ Fallback connection also failed:', fallbackErr.message);
              }
            }
            
            // If we get here, try a non-SRV format as last resort
            try {
              const nonSrvUri = uri.replace('mongodb+srv://', 'mongodb://');
              const directOptions = { ...options, directConnection: true };
              console.log('Trying direct connection format...');
              await mongoose.connect(nonSrvUri, directOptions);
              console.log('✅ Connected using direct connection format');
              return mongoose.connection;
            } catch (finalErr) {
              console.error('❌ All MongoDB connection attempts failed');
              throw finalErr;
            }
          }
        }
        
        module.exports = {
          connect: connectToMongoDB,
          connection: mongoose.connection,
          mongoose
        };
        EOL
        echo "✅ Created enhanced MongoDB connection handler"

    - name: Test MongoDB connection with IP whitelist bypass
      id: mongodb_test
      continue-on-error: true
      run: |
        echo "# MongoDB Atlas Connection" > .env
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
        echo "MONGODB_SSL=true" >> .env
        echo "NODE_ENV=production" >> .env
        
        # Try connection with our enhanced bypass solution
        node mongodb-bypass.js || echo "MongoDB connection test failed, creating fallbacks and continuing with deployment"
        
        # Ensure the fallback configuration is available
        if [ ! -d "config" ]; then
          mkdir -p config
        fi
        
        echo "MONGODB_DB=FreshShareDB" >> .env
        echo "MONGODB_SSL=true" >> .env
        echo "PORT=3001" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "FASTIFY_BACKEND_URL=http://localhost:8080" >> .env
        echo "BASE_URL=${{ secrets.BASE_URL || '' }}" >> .env
        echo "NODE_ENV=production" >> .env
        
        # Create improved MongoDB test script
        cat > test-mongodb.js << 'EOF'
        require('dotenv').config();
        const mongoose = require('mongoose');
        
        const uri = process.env.MONGODB_URI;
        if (!uri) {
          console.error('ERROR: MONGODB_URI not set');
          process.exit(1);
        }
        
        console.log('Testing MongoDB connection...');
        console.log('Connection URI:', uri.replace(/:[^:@]+@/, ':***@'));
        
        // Handle both SRV and non-SRV connection strings
        let connectionUri = uri;
        
        // If using SRV format and having DNS issues, try standard format
        if (uri.includes('mongodb+srv://')) {
          const standardUri = uri.replace('mongodb+srv://', 'mongodb://');
          console.log('Attempting with standard URI format to bypass DNS SRV lookup...');
          connectionUri = standardUri;
        }
        
        mongoose.connect(connectionUri, {
          serverSelectionTimeoutMS: 30000,
          connectTimeoutMS: 30000,
          socketTimeoutMS: 45000,
          ssl: true,
          useNewUrlParser: true,
          useUnifiedTopology: true,
          directConnection: true // Bypass SRV DNS lookup
        })
        .then(() => {
          console.log('✅ MongoDB connection successful');
          process.exit(0);
        })
        .catch(err => {
          console.error('❌ MongoDB connection failed:', err);
          process.exit(1);
        });
        EOF
        
        # Install mongoose for test
        npm install mongoose dotenv --no-save
        
        # Test MongoDB connection with retries
        echo "Testing MongoDB connection..."
        attempts=0
        max_attempts=3
        
        until node test-mongodb.js; do
          attempts=$((attempts + 1))
          if [ $attempts -eq $max_attempts ]; then
            echo "❌ MongoDB connection failed after $max_attempts attempts"
            exit 1
          fi
          echo "Retrying in 5 seconds..."
          sleep 5
        done

    - name: Install diagnostic script dependencies
      run: npm install --save mongoose pg dotenv chalk@4

    - name: Run diagnostic script
      run: node diagnose-production.js
      env:
        NODE_ENV: production
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Create Fastify .env file
      env:
        DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
      run: |
        mkdir -p fastify-backend
        echo "PORT=8080" > fastify-backend/.env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> fastify-backend/.env
        echo "DATABASE_SSL=${DATABASE_SSL:-false}" >> fastify-backend/.env
        echo "NODE_ENV=production" >> fastify-backend/.env

    - name: Prepare Fastify Production Files
      run: |
        # Create production-ready server.js
        cat > fastify-backend/server.js << 'EOF'
        require('dotenv/config');
        const fastify = require('fastify');
        const { Pool } = require('pg');
        
        // Config
        const PORT = Number(process.env.PORT || 8080);
        const DATABASE_URL = process.env.DATABASE_URL || 'postgres://localhost:5432/freshshare';
        console.log('Starting server on port:', PORT);
        console.log('Using database URL (redacted):', DATABASE_URL.replace(/:\\/\\/[^:]+:[^@]+@/, '://***:***@'));
        
        // Create app
        const app = fastify({ 
          logger: true,
          trustProxy: true
        });
        
        // Basic health check endpoint
        app.get('/health', async () => ({ ok: true }));
        
        // Minimal parse-label endpoint
        app.post('/parse-label', async (req, reply) => {
          const body = req.body || {};
          return { gtinCase: body.text?.slice(0, 14) || null };
        });
        
        // Minimal case-pack endpoint
        app.get('/case-pack', async (req, reply) => {
          return { items: [] };
        });
        
        // Start server
        app.listen({ port: PORT, host: '0.0.0.0' })
          .then(() => {
            console.log(`FreshShare backend listening on port ${PORT}`);
            // Create a status file to indicate successful startup
            require('fs').writeFileSync('.server_running', new Date().toISOString());
          })
          .catch((err) => { 
            console.error('Server startup error:', err); 
            process.exit(1); 
          });
        EOF
        
        # Create startup script
        cat > fastify-backend/start-backend-prod.sh << 'EOF'
        #!/bin/bash
        # Production startup script with proper process management for Fastify backend
        
        # Print commands as they execute
        set -x
        
        # Set environment
        export NODE_ENV=production
        
        # Get the directory of this script
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        cd "$DIR"
        
        # Kill any existing processes
        pkill -f "node server.js" || echo "No existing processes found"
        
        # Load environment variables from .env file
        if [ -f ".env" ]; then
          # Export all non-comment lines from .env
          set -a
          source .env
          set +a
          echo "Environment loaded from .env file"
        fi
        
        # Verify required variables
        echo "Using PORT: ${PORT:-8080}"
        echo "Using NODE_ENV: ${NODE_ENV:-production}"
        
        # Start the server in background with proper detachment
        echo "Starting Fastify backend server..."
        node server.js > fastify.log 2>&1 &
        
        # Save PID
        PID=$!
        echo $PID > .fastify.pid
        echo "Server started with PID: $PID"
        
        # Wait briefly and verify process is running
        sleep 5
        if kill -0 $PID 2>/dev/null; then
          echo "Server is running with PID: $PID"
          
          # Check for server_running status file
          if [ -f ".server_running" ]; then
            echo "Server startup successful:"
            cat .server_running
            exit 0
          else
            echo "WARNING: Process is running but .server_running file not created yet."
            echo "Waiting additional time..."
            sleep 5
            if [ -f ".server_running" ]; then
              echo "Server startup successful:"
              cat .server_running
              exit 0
            else
              echo "ERROR: Server running but didn't create status file. Check logs:"
              cat fastify.log
              exit 1
            fi
          fi
        else
          echo "ERROR: Server failed to start properly. Check logs:"
          cat fastify.log
          exit 1
        fi
        EOF
        
        # Make scripts executable
        chmod +x fastify-backend/start-backend-prod.sh

    - name: Verify scripts exist
      run: |
        if [ ! -f "start-express.sh" ]; then
          echo "ERROR: start-express.sh is missing!"
          exit 1
        fi
        if [ ! -f "fastify-backend/start-backend-prod.sh" ]; then
          echo "ERROR: fastify-backend/start-backend-prod.sh is missing!"
          exit 1
        fi
        echo "Scripts verified successfully"

    - name: Debug list startup scripts
      run: |
        ls -la
        ls -la fastify-backend || true

    - name: Install dependencies locally
      run: |
        # Set npm config for CI environment
        npm config set registry https://registry.npmjs.org/
        npm config set strict-ssl false
        npm config list
        
        # Clean Express dependencies
        rm -rf node_modules package-lock.json
        if ! npm ci || npm install --omit=dev --no-fund --no-audit; then
          echo "Trying alternative npm install method"
          if ! npm install --omit=dev --no-fund --no-audit --legacy-peer-deps; then
            echo "npm install failed for Express. Exiting."
            exit 1
          fi
        fi
        
        # Clean Fastify dependencies
        cd fastify-backend
        rm -rf node_modules package-lock.json
        if ! npm install --omit=dev --no-fund --no-audit fastify pg dotenv; then
          echo "Trying alternative method for Fastify deps"
          if ! npm install --omit=dev --no-fund --no-audit --legacy-peer-deps fastify pg dotenv; then
            echo "npm install failed for Fastify. Exiting."
            exit 1
          fi
        fi
        cd ..

    - name: Make startup scripts executable
      run: |
        chmod +x start-express.sh
        chmod +x fastify-backend/start-backend-prod.sh
        
    - name: Set up SSH key
      run: |
        # Create SSH directory with proper permissions
        mkdir -p ~/.ssh || true
        chmod 700 ~/.ssh
        
        # Write the private key with proper formatting
        echo "${{ secrets.actions_deploy_key }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add server to known hosts
        ssh-keyscan -p ${{ secrets.SFTP_PORT }} -H ${{ secrets.FTP_SERVER }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
        # Debug: Check key format
        echo "Key starts with:"
        head -1 ~/.ssh/id_rsa
        echo "Key ends with:"
        tail -1 ~/.ssh/id_rsa
        
        # Test SSH connection
        ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SFTP_PORT }} myfrovov@${{ secrets.FTP_SERVER }} echo "SSH connection successful"

    - name: Ensure remote directories exist
      run: |
        ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SFTP_PORT }} myfrovov@${{ secrets.FTP_SERVER }} 'mkdir -p ~/freshshare1.3 ~/freshshare1.3/fastify-backend'

    - name: Setup Node.js on production server with MongoDB bypass
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.FTP_SERVER }}
        username: myfrovov
        key: ${{ secrets.actions_deploy_key }}
        port: ${{ secrets.SFTP_PORT }}
        script: |
          cd ~/freshshare1.3
          echo "Setting up Node.js environment..."
          source setup-node-env.sh
          
          # Test MongoDB connection from production server
          echo "Testing MongoDB connection from production server..."
          node -e "require('dotenv').config(); const mongoose = require('mongoose'); const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/freshshare_db'; mongoose.connect(uri, { serverSelectionTimeoutMS: 5000, useNewUrlParser: true, useUnifiedTopology: true }).then(() => { console.log('✅ MongoDB connection successful from production'); process.exit(0); }).catch(err => { console.log('⚠️ MongoDB connection failed from production: ' + err.message); console.log('Using fallback configuration...'); if (!require('fs').existsSync('config')) { require('fs').mkdirSync('config', { recursive: true }); } process.exit(0); });"
          
          # Ensure config directory exists and copy fallback configs if needed
          if [ ! -d "config" ]; then
            mkdir -p config
          fi

    - name: Copy files directly to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.FTP_SERVER }}
        port: ${{ secrets.SFTP_PORT }}
        username: myfrovov
        password: ${{ secrets.SFTP_PASSWORD }}
        key: ${{ secrets.actions_deploy_key }}
        source: ".,!.git,!.github,!node_modules"
        target: "~/freshshare1.3/"
        strip_components: 0
        overwrite: true

    - name: Verify files on server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.FTP_SERVER }}
        port: ${{ secrets.SFTP_PORT }}
        username: myfrovov
        password: ${{ secrets.SFTP_PASSWORD }}
        key: ${{ secrets.actions_deploy_key }}
        script: |
          echo "Verifying deployment files..."
          ls -la ~/freshshare1.3
          echo "Verification complete"

    - name: Post-deployment setup - Node.js detection
      run: |
        ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SFTP_PORT }} myfrovov@${{ secrets.FTP_SERVER }} '
          # Detect Node.js paths on cPanel
          echo "Detecting Node.js installation..."
          
          # Check for Node.js App in cPanel - prioritize Node.js 18
          if [ -d "$HOME/nodevenv" ]; then
            echo "Found cPanel Node.js App environment"
            echo "Available Node.js apps:"
            ls -la $HOME/nodevenv/ || echo "Cannot list nodevenv directory"
            
            # Look for any app with Node.js 18
            NODE_VERSION_DIR=$(find $HOME/nodevenv -path "*/18/bin" -type d | head -1)
            if [ -z "$NODE_VERSION_DIR" ]; then
              # Look for any Node.js version (including v14, v16, etc.)
              NODE_VERSION_DIR=$(find $HOME/nodevenv -name "bin" -type d | head -1)
              if [ -n "$NODE_VERSION_DIR" ]; then
                DETECTED_VERSION=$($NODE_VERSION_DIR/node --version 2>/dev/null || echo "unknown")
                echo "WARNING: Node.js 18 not found, using: $NODE_VERSION_DIR (version: $DETECTED_VERSION)"
                echo "Please update your cPanel Node.js App to version 18 for full compatibility"
              fi
            fi
            
            if [ -n "$NODE_VERSION_DIR" ]; then
              NODE_BIN="$NODE_VERSION_DIR/node"
              NPM_BIN="$NODE_VERSION_DIR/npm"
              export PATH="$NODE_VERSION_DIR:$PATH"
              echo "Using cPanel Node.js App: $NODE_BIN"
              # Check Node.js version
              $NODE_BIN --version || echo "Failed to get Node.js version"
            else
              echo "ERROR: No Node.js application found in cPanel"
              echo "Please create a Node.js application in cPanel first"
            fi
          else
            echo "ERROR: No cPanel Node.js environment found"
            echo "Please create a Node.js application in cPanel"
          fi
          
          # If not found, check common paths
          if [ -z "$NODE_BIN" ]; then
            NODE_PATHS=(
              "/opt/cpanel/ea-nodejs18/bin"
              "/opt/cpanel/ea-nodejs20/bin"
              "/usr/local/bin"
              "/usr/bin"
            )
            
            for path in "${NODE_PATHS[@]}"; do
              if [ -f "$path/node" ] && [ -f "$path/npm" ]; then
                NODE_BIN="$path/node"
                NPM_BIN="$path/npm"
                export PATH="$path:$PATH"
                echo "Found Node.js at: $NODE_BIN"
                break
              fi
            done
          fi
          
          # Final fallback - try to find npm separately
          if [ -z "$NPM_BIN" ] || [ ! -f "$NPM_BIN" ]; then
            NPM_BIN=$(find /usr -name "npm" -type f 2>/dev/null | head -1)
            if [ -z "$NPM_BIN" ]; then
              NPM_BIN=$(find $HOME -name "npm" -type f 2>/dev/null | head -1)
            fi
            echo "Found npm at: $NPM_BIN"
          fi
          
          # Use system PATH as last resort
          if [ -z "$NODE_BIN" ]; then
            NODE_BIN=$(which node 2>/dev/null || echo "node")
            echo "Using system node: $NODE_BIN"
          fi
          
          if [ -z "$NPM_BIN" ]; then
            NPM_BIN=$(which npm 2>/dev/null || echo "npm")
            echo "Using system npm: $NPM_BIN"
          fi
        '

    - name: Start Fastify Backend
      run: |
        ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SFTP_PORT }} myfrovov@${{ secrets.FTP_SERVER }} '
          # Select target backend directory (supports repo path or app path)
          if [ -d "$HOME/freshshare1.3/fastify-backend" ]; then
            TARGET_DIR="$HOME/freshshare1.3/fastify-backend"
          elif [ -d "$HOME/repositories/FreshShare1.3/fastify-backend" ]; then
            TARGET_DIR="$HOME/repositories/FreshShare1.3/fastify-backend"
          else
            echo "ERROR: Could not find backend directory in ~/freshshare1.3/fastify-backend or ~/repositories/FreshShare1.3/fastify-backend"; exit 1
          fi
          echo "Using backend dir: $TARGET_DIR"
          cd "$TARGET_DIR"
          
          # Make startup script executable again (in case permissions were lost)
          chmod +x start-backend-prod.sh
          
          # Activate cPanel Node.js environment and detect node/npm
          echo "Activating cPanel Node.js environment..."
          if [ -f "$HOME/nodevenv/freshshare1.3/18/bin/activate" ]; then
            source "$HOME/nodevenv/freshshare1.3/18/bin/activate"
          else
            # Fallback: source the first available nodevenv activate script
            ACTIVATE_FILE=$(find "$HOME/nodevenv" -type f -name activate 2>/dev/null | head -1)
            if [ -n "$ACTIVATE_FILE" ]; then
              echo "Sourcing nodevenv: $ACTIVATE_FILE"
              source "$ACTIVATE_FILE"
            else
              # Last resort: add common paths
              for p in "/opt/cpanel/ea-nodejs18/bin" "/opt/cpanel/ea-nodejs20/bin"; do
                if [ -x "$p/node" ]; then export PATH="$p:$PATH"; fi
              done
            fi
          fi

          NODE_BIN=$(which node 2>/dev/null || true)
          NPM_BIN=$(which npm 2>/dev/null || true)
          echo "Detected NODE_BIN=$NODE_BIN"
          echo "Detected NPM_BIN=$NPM_BIN"
          # Print diagnostics
          echo "PATH=$PATH"
          if [ -n "$NODE_BIN" ]; then "$NODE_BIN" -v || true; fi
          if [ -n "$NPM_BIN" ]; then "$NPM_BIN" -v || true; fi
          if [ -z "$NODE_BIN" ] || [ -z "$NPM_BIN" ]; then
            echo "ERROR: node or npm not found in PATH after activation. Showing env for debugging:"
            env | grep -E "PATH|nodevenv" || true
            exit 1
          fi

          # Install required packages with more reliable options
          echo "Installing Fastify dependencies with $NPM_BIN"
          "$NPM_BIN" config set registry https://registry.npmjs.org/
          "$NPM_BIN" config set strict-ssl false
          "$NPM_BIN" install --omit=dev --no-fund --no-audit fastify pg dotenv || \
          "$NPM_BIN" install --omit=dev --no-fund --no-audit --legacy-peer-deps fastify pg dotenv || \
          echo "WARNING: npm install returned non-zero; continuing"
          
          # Test database connection SEPARATELY before starting the server
          echo "Testing database connection (via temp JS file)..."
          cat > db-test.js << 'EOF'
          require('dotenv/config');
          const { Pool } = require('pg');
          const red = (u) => (u || '').replace(/:\/\/[^:]+:[^@]+@/, '://***:***@');
          const url = process.env.DATABASE_URL || 'postgres://localhost:5432/freshshare';
          const sslEnv = String(process.env.DATABASE_SSL || '').toLowerCase() === 'true';
          const requiresSSL = sslEnv || /sslmode=require|ssl=true|sslmode=no-verify|require/i.test(url);
          const poolConfig = { connectionString: url, ...(requiresSSL ? { ssl: { rejectUnauthorized: false } } : {}) };
          console.log('Testing connection to:', red(url), 'ssl:', requiresSSL);
          const pool = new Pool(poolConfig);
          pool.query('SELECT 1')
            .then(() => { console.log('✅ Database connection successful'); process.exit(0); })
            .catch((e) => { console.error('❌ Database connection failed:', e); process.exit(1); });
          EOF
          "$NODE_BIN" db-test.js || echo "WARNING: Database connection test failed, but continuing deployment"
          rm -f db-test.js
          
          # Stop any existing processes (ts-node/server.ts/pm2)
          echo "Stopping any existing Fastify processes (server.js/server.ts/ts-node/pm2)..."
          pkill -f "node.*server" || true
          pkill -f "ts-node" || true
          pkill -f "server.ts" || true
          pkill -f "/home/myfrovov/fastify-backend" || true
          if command -v pm2 >/dev/null 2>&1; then
            pm2 delete all || true
            pm2 kill || true
          fi
          
          # Start server with timeout protection to avoid hanging the GitHub Action
          echo "Starting Fastify backend with timeout protection..."
          if command -v timeout >/dev/null 2>&1; then
            timeout 20 ./start-backend-prod.sh || {
              echo "WARN: Server startup timed out after 20 seconds";
              echo "Starting in background without waiting for startup confirmation";
              nohup ./start-backend-prod.sh > fastify.log 2>&1 &
              echo "Process started with PID: $!"
            }
          else
            echo "timeout command not available; starting in background";
            nohup ./start-backend-prod.sh > fastify.log 2>&1 &
            echo "Process started with PID: $!"
          fi
          
          # Non-blocking check (GitHub Actions workflow will continue regardless)
          echo "Checking if status file was created..."
          if [ -f ".server_running" ]; then
            echo "✅ Fastify backend started successfully"
            cat .server_running
          else
            echo "⚠️ No status file yet, server may still be starting up"
            echo "Recent log entries:"
            tail -n 10 fastify.log || echo "No log file found"
          fi
          
          # Create a cron job to ensure the server stays running
          # Will check every 5 minutes and restart if needed
          CRON_JOB="*/5 * * * * cd $TARGET_DIR && ./start-backend-prod.sh >> cron.log 2>&1"
          (crontab -l 2>/dev/null | grep -v "fastify-backend && ./start-backend-prod.sh" || echo "") | { cat; echo "$CRON_JOB"; } | crontab -
          echo "✅ Added cron job to keep backend running"
        '

    - name: Start Express server
      run: |
        ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SFTP_PORT }} myfrovov@${{ secrets.FTP_SERVER }} '
          # Select project root (Express)
          if [ -d "$HOME/freshshare1.3" ]; then
            PROJECT_ROOT="$HOME/freshshare1.3"
          elif [ -d "$HOME/repositories/FreshShare1.3" ]; then
            PROJECT_ROOT="$HOME/repositories/FreshShare1.3"
          else
            echo "ERROR: Could not find project root in ~/freshshare1.3 or ~/repositories/FreshShare1.3"; exit 1
          fi
          echo "Using project root: $PROJECT_ROOT"
          cd "$PROJECT_ROOT"
          # Activate cPanel Node.js environment for Express as well
          echo "Activating cPanel Node.js environment (Express step)..."
          if [ -f "$HOME/nodevenv/freshshare1.3/18/bin/activate" ]; then
            source "$HOME/nodevenv/freshshare1.3/18/bin/activate"
          else
            ACTIVATE_FILE=$(find "$HOME/nodevenv" -type f -name activate 2>/dev/null | head -1)
            if [ -n "$ACTIVATE_FILE" ]; then
              echo "Sourcing nodevenv: $ACTIVATE_FILE"
              source "$ACTIVATE_FILE"
            else
              for p in "/opt/cpanel/ea-nodejs18/bin" "/opt/cpanel/ea-nodejs20/bin"; do
                if [ -x "$p/node" ]; then export PATH="$p:$PATH"; fi
              done
            fi
          fi

          NODE_BIN=$(which node 2>/dev/null || true)
          NPM_BIN=$(which npm 2>/dev/null || true)
          echo "Detected NODE_BIN=$NODE_BIN"
          echo "Detected NPM_BIN=$NPM_BIN"
          echo "PATH=$PATH"
          if [ -z "$NODE_BIN" ] || [ -z "$NPM_BIN" ]; then
            echo "ERROR: node/npm not found in Express step after activation"; exit 1
          fi

          # Install Express dependencies with more reliable options
          echo "Installing Express dependencies with $NPM_BIN"
          "$NPM_BIN" config set registry https://registry.npmjs.org/
          "$NPM_BIN" config set strict-ssl false
          "$NPM_BIN" ci || \
          "$NPM_BIN" install --omit=dev --no-fund --no-audit || \
          "$NPM_BIN" install --omit=dev --no-fund --no-audit --legacy-peer-deps || \
          echo "npm install failed for Express, but continuing deployment"
          
          # Make script executable
          chmod +x start-express.sh
          
          # Start Express server
          echo "Starting Express server in background..."
          nohup ./start-express.sh > express.log 2>&1 &
          EXPRESS_PID=$!
          echo "Express started with PID: $EXPRESS_PID"
          
          # Create cron jobs for Express and diagnostics
          EXPRESS_CRON="*/5 * * * * cd $HOME/freshshare1.3 && ./start-express.sh >> express_cron.log 2>&1"
          DIAG_CRON="*/30 * * * * cd $HOME/freshshare1.3 && node diagnose-production.js >> diagnostic.log 2>&1"
          
          # Update crontab with both jobs
          (crontab -l 2>/dev/null | grep -v "freshshare1.3/start-express.sh\|diagnose-production.js" || echo "") | { cat; echo "$EXPRESS_CRON"; echo "$DIAG_CRON"; } | crontab -
          echo "✅ Added cron jobs for Express and diagnostics"
          
          # Verify services are running
          echo "Currently running Node.js processes:"
          ps aux | grep node || echo "No node processes found"
          
          # Run diagnostic checks
          echo "Running diagnostic checks..."
          node diagnose-production.js || echo "Warning: Some diagnostic checks failed"
        '
