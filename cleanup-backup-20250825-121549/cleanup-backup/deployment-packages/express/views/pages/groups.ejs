<%- contentFor('style') %>
<style>
    .groups-page {
        display: flex;
        width: 100%;
    }
    
    .sidebar {
        width: 250px;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-right: 30px;
    }
    
    .main-area {
        flex: 1;
    }
    
    .groups-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 20px;
    }

    .group-card {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: transform 0.2s;
    }

    .group-card:hover {
        transform: translateY(-5px);
    }

    .group-card-image-container {
        background: #f8f9fa;
        height: 160px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #6c757d;
    }

    .group-card-image-container i {
        font-size: 48px;
    }

    .group-card-content {
        padding: 20px;
    }

    .group-name {
        margin: 0 0 10px;
        font-size: 1.25rem;
        color: #2c3e50;
    }

    .group-description {
        color: #6c757d;
        margin-bottom: 15px;
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .group-meta {
        display: flex;
        justify-content: space-between;
        font-size: 0.85rem;
        color: #6c757d;
        margin-bottom: 15px;
    }

    .group-meta i {
        margin-right: 5px;
    }

    .join-group-btn {
        display: block;
        width: 100%;
        padding: 8px;
        background: #007bff;
        color: white;
        text-align: center;
        border-radius: 4px;
        text-decoration: none;
        transition: background-color 0.2s;
    }

    .join-group-btn:hover {
        background: #0056b3;
        text-decoration: none;
        color: white;
    }
    
    @media (max-width: 1200px) {
        .groups-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }
    
    @media (max-width: 992px) {
        .groups-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }
    
    @media (max-width: 768px) {
        .groups-page {
            flex-direction: column;
        }
        
        .sidebar {
            width: 100%;
            margin-right: 0;
            margin-bottom: 20px;
        }
        
        .groups-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<%- contentFor('body') %>
<div class="main-content">
    <div class="groups-page">
        <!-- Left Sidebar -->
        <div class="sidebar">
            <button class="create-group-btn" id="create-group-btn">
                <i class="fas fa-plus me-2"></i>Create New Group
            </button>
            
            <div class="group-filters">
                <h5 class="mb-2">Filter Groups</h5>
                <div class="filter-option">
                    <input type="checkbox" id="nearby" checked>
                    <label for="nearby">Nearby groups</label>
                </div>
                <div class="filter-option">
                    <input type="checkbox" id="active">
                    <label for="active">Active groups</label>
                </div>
                <div class="filter-option">
                    <input type="checkbox" id="open">
                    <label for="open">Open for new members</label>
                </div>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="main-area">
            <input type="text" class="search-input" id="search-groups" placeholder="Search groups...">

            <div class="groups-grid" id="groups-container">
                <!-- Group cards will be loaded dynamically -->
                <div id="loading-indicator" class="text-center w-100 my-5">
                    <i class="fas fa-spinner fa-spin fa-2x"></i>
                    <p>Loading groups...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Group Card Template -->
<template id="group-card-template">
    <div class="group-card">
        <div class="group-card-image-container">
            <i class="fas fa-users fa-3x"></i>
        </div>
        <div class="group-card-content">
            <h3 class="group-name"></h3>
            <p class="group-description"></p>
            <div class="group-meta">
                <div class="group-members">
                    <i class="fas fa-users"></i> <span class="member-count"></span> members
                </div>
                <div class="group-location">
                    <i class="fas fa-map-marker-alt"></i> <span class="group-city"></span>
                </div>
            </div>
            <a href="/group-details?id=${group._id}" class="join-group-btn">View Group</a>
        </div>
    </div>
</template>

<%- contentFor('script') %>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const token = localStorage.getItem('token'); 
        const groupsContainer = document.getElementById('groups-container');
        const groupCardTemplate = document.getElementById('group-card-template');
        const loadingIndicator = document.getElementById('loading-indicator');
        const searchInput = document.getElementById('search-groups');
        const createGroupBtn = document.getElementById('create-group-btn');
        
        // Load all groups
        loadGroups();
        
        // Search functionality
        searchInput.addEventListener('input', debounce(function() {
            const searchTerm = this.value.trim().toLowerCase();
            filterGroups(searchTerm);
        }, 300));
        
        // Create group button
        if (createGroupBtn) {
            createGroupBtn.addEventListener('click', function() {
                // Redirect to create group page
                window.location.href = '/create-group';
            });
        }
        
        // Load groups from API
        async function loadGroups() {
            try {
                console.log('Loading groups...');
                console.log('Using auth token:', token ? 'Yes' : 'No');
                
                // Try to load groups
                const response = await fetch('/api/groups', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        ...(token ? {
                            'Authorization': `Bearer ${token}`,
                            'x-access-token': token
                        } : {})
                    }
                });
                
                console.log('API response status:', response.status);
                
                if (!response.ok) {
                    throw new Error(`Failed to load groups: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('Groups data received:', data);
                
                // Remove loading indicator
                if (loadingIndicator) {
                    loadingIndicator.remove();
                }
                
                if (data.success && data.groups && data.groups.length > 0) {
                    console.log(`Rendering ${data.groups.length} groups`);
                    renderGroups(data.groups);
                } else {
                    console.log('No groups found or empty groups array');
                    groupsContainer.innerHTML = '<p class="text-center w-100">No groups found. Be the first to create one!</p>';
                }
            } catch (error) {
                console.error('Error loading groups:', error);
                
                // Remove loading indicator
                if (loadingIndicator) {
                    loadingIndicator.remove();
                }
                
                groupsContainer.innerHTML = '<p class="text-center w-100">Failed to load groups. Please try again later.</p>';
            }
        }
        
        // Render groups to the container
        function renderGroups(groups) {
            // Clear container first
            groupsContainer.innerHTML = '';
            
            // Debug output
            console.log('Groups data:', groups);
            
            groups.forEach(group => {
                try {
                    const groupCard = groupCardTemplate.content.cloneNode(true);
                    
                    // Set group image
                    const groupImage = groupCard.querySelector('.group-card-image-container');
                    groupImage.innerHTML = getGroupImage(group.category);
                    
                    // Set group details
                    groupCard.querySelector('.group-name').textContent = group.name;
                    groupCard.querySelector('.group-description').textContent = truncateText(group.description, 100);
                    groupCard.querySelector('.member-count').textContent = group.members ? group.members.length : 0;
                    
                    // Set location
                    const location = group.location && group.location.city ? group.location.city : 'Unknown location';
                    groupCard.querySelector('.group-city').textContent = location;
                    
                    // Set view group link
                    const viewGroupLink = groupCard.querySelector('.join-group-btn');
                    viewGroupLink.href = `/group-details?id=${group._id}`;
                    
                    // Add to container
                    groupsContainer.appendChild(groupCard);
                    console.log(`Rendered group: ${group.name}`);
                } catch (error) {
                    console.error(`Error rendering group ${group.name}:`, error);
                }
            });
            
            // If no groups were rendered, show a message
            if (groups.length === 0) {
                groupsContainer.innerHTML = '<p class="text-center w-100">No groups found. Be the first to create one!</p>';
            }
        }
        
        // Get appropriate image based on group category
        function getGroupImage(category) {
            // Use Font Awesome icons instead of images for more reliability
            const iconMap = {
                'neighborhood': '<i class="fas fa-home fa-3x"></i>',
                'community_garden': '<i class="fas fa-seedling fa-3x"></i>',
                'food_bank': '<i class="fas fa-box-open fa-3x"></i>',
                'cooking_club': '<i class="fas fa-utensils fa-3x"></i>',
                'other': '<i class="fas fa-users fa-3x"></i>'
            };
            
            return iconMap[category] || iconMap.other;
        }
        
        // Truncate text to specified length
        function truncateText(text, maxLength) {
            if (!text) return '';
            
            if (text.length <= maxLength) {
                return text;
            }
            
            return text.substring(0, maxLength) + '...';
        }
        
        // Debounce function for search input
        function debounce(func, delay) {
            let timeout;
            
            return function() {
                const context = this;
                const args = arguments;
                
                clearTimeout(timeout);
                
                timeout = setTimeout(() => {
                    func.apply(context, args);
                }, delay);
            };
        }
        
        // Filter groups based on search term
        function filterGroups(searchTerm) {
            const groupCards = groupsContainer.querySelectorAll('.group-card');
            
            if (!searchTerm) {
                // Show all cards if search term is empty
                groupCards.forEach(card => {
                    card.style.display = 'block';
                });
                
                return;
            }
            
            groupCards.forEach(card => {
                const name = card.querySelector('.group-name').textContent.toLowerCase();
                const description = card.querySelector('.group-description').textContent.toLowerCase();
                const location = card.querySelector('.group-city').textContent.toLowerCase();
                
                // Show card if it matches search term
                if (name.includes(searchTerm) || 
                    description.includes(searchTerm) || 
                    location.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }
    });
</script>
